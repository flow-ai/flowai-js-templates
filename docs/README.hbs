# The Flow.ai JavaScript Response Templates
Easy helper classes to create rich [flow.ai](https://flow.ai) response templates like cards, buttons and locations.

Reponse templates allow developers to render widgets at channels that support this like Facebook Messenger or the flow.ai Web client.

## What can you do?

* No need to write error prone [JSON](JSON.md)
* Full support for all template types

## Getting started
All classes are available for usage with Flow.ai Cloud functions. When you want to send rich responses using a webhook, install the library with NPM.

### Install

```bash
npm install --save flowai-js-templates
```

### Usage
When using Flow.ai [cloud code](https://docs.flow.ai/features/cloud-functions.html) there is no need to require or import anything.

```js
const { Card } = require('flowai-js-templates')

const card = new Card({
  title: "Cookie factory",
  subtitle: "Infinite lane 23"
})
```

### Sending back rich messages
You can send back rich messages in 3 different ways

#### Cloud code
Within a [cloud code](https://docs.flow.ai/features/cloud-functions.html) function you can directly send back messages by returning them from your function.

##### Sending a single message with a single response

```js
async payload=> {

  // Create a speech bubble
  const text = new Text("Hi there!")

  // Create a message with fallback text
  const message = new Message("Hi, there")
  message.addResponse(text)

  return message
}
```

##### Sending a single message with multiple responses

```js
async payload=> {

  // Create a speech bubble
  const text = new Text("Hi there!")

  // Create a card
  const card = new Card({
    title: "Cookie factory",
    subtitle: "Infinite lane 23"
  })

  return new Message("Hi, the address of the Cookie factory is Infinite lane 23")
          .addResponse(text)
          .addResponse(card)
}
```

##### Sending back multiple messages

```js
async payload=> {

  // Create a speech bubble
  const text = new Text("Hi there!")

  // Create a card
  const card = new Card({
    title: "Cookie factory",
    subtitle: "Infinite lane 23"
  })

  return [
    new Message("Hi, there").addResponse(text),
    new Message("the address of the Cookie factory is Infinite lane 23").addResponse(card)
  ]
}
```

## Channel specific

We support a number of generic components that render on most channels. For example a `Card` element works for both Facebook Messenger and the Flow.ai Web Widget. 

However, there are specific components as well for channels like Apple Business Chat or an IVR Bot. 

You can create and send these as well. The following example shows how to create and send a Time Picker for Apple Business chat.

```js
async payload=> {
  const timePicker = new Apple.TimePicker({
    receivedMessage: new Apple.InteractiveMessage({
      title: "Schedule an Appointment",
      subtitle: "We'll see you there!",
      style: "icon"
    }),
    replyMessage: new Apple.InteractiveMessage({
      title: "Your Appointment",
      style: "icon"
    }),
    event: new Apple.EventItem({
      title: "Some event",
      location: new Apple.LocationItem({
        latitude: 37.7725,
        longitude: -122.4311,
        radius: 100,
        title: "Some venue"
      }),
      timeslots: [
        new Apple.TimeItem({
          duration: 60,
          startTime: "2020-05-26T08:27:55+00:00"
        }),
        new Apple.TimeItem({
          duration: 60,
          startTime: "2020-05-26T09:27:55+00:00"
        }),
        new Apple.TimeItem({
          duration: 60,
          startTime: "2020-05-26T10:27:55+00:00"
        })
      ],
      timezoneOffset: 2
    })
  })

  return new Message('Time picker').addResponse(timePicker)
}
```

For a complete overview of all reply actions see the [Flow.ai documentation](https://flow.ai/docs/integrations/overview) site.

{{#*inline "classDoc" }}
{{#class name=className}}
<a name="{{{anchorName}}}"></a>

{{>heading-indent}}{{id}}

{{>description~}}
{{>summary~}}
{{>examples~}}
{{>properties~}}
{{#children inherited=undefined ~}}
{{>heading-indent}}{{>sig-name}}

{{>description~}}
{{>summary~}}
{{>examples~}}
{{>params~}}
{{>properties~}}
{{/children~}}
{{/class}}
{{/inline}}

---

# Reply Templates Reference

{{>classDoc className="Message"}}

---

# Generic Response Templates Reference

There are a number of generic templates that are supported by multiple messaging channels

{{>classDoc className="Text"}}

{{>classDoc className="Image"}}

{{>classDoc className="File"}}

{{>classDoc className="Video"}}

{{>classDoc className="Audio"}}

{{>classDoc className="Location"}}

{{>classDoc className="Buttons"}}

{{>classDoc className="Card"}}

{{>classDoc className="Carousel"}}

{{>classDoc className="List"}}

{{>classDoc className="ListItem"}}

---

{{>classDoc className="Action"}}

{{>classDoc className="Button"}}

{{>classDoc className="Media"}}

{{>classDoc className="Param"}}

{{>classDoc className="QuickReply"}}

--- 

# Phone Templates Reference

{{>classDoc className="Ask"}}

{{>classDoc className="Say"}}

{{>classDoc className="Pause"}}

{{>classDoc className="Dial"}}

{{>classDoc className="Hangup"}}

--- 

# Apple Business Chat Templates Reference (Preview)


{{>classDoc className="RichLink"}}

{{>classDoc className="ImageAsset"}}

{{>classDoc className="VideoAsset"}}

---

{{>classDoc className="ListPicker"}}

{{>classDoc className="ListPickerSection"}}

{{>classDoc className="ListPickerItem"}}

---

<!--{{>classDoc className="TimePicker"}}-->

<!--{{>classDoc className="EventItem"}}-->

<!--{{>classDoc className="TimeItem"}}-->

<!--{{>classDoc className="LocationItem"}}-->

<!------->

{{>classDoc className="AuthRequest"}}

{{>classDoc className="Oauth2"}}

<!------->

<!--{{>classDoc className="PayRequest"}}-->

<!--{{>classDoc className="PayMerchant"}}-->

<!--{{>classDoc className="PayShippingMethod"}}-->

<!--{{>classDoc className="PayLineItem"}}-->

<!--{{>classDoc className="PayEndpoints"}}-->

<!------->

{{>classDoc className="CustomInteractiveData"}}

---

{{>classDoc className="InteractiveMessage"}}
